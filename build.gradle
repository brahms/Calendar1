
subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'eclipse'
    sourceCompatibility = '1.7'
    repositories {
        mavenCentral()
    }
    tasks.withType(GroovyCompile) {
        groovyOptions.optimizationOptions.indy = true
    }
    task "create-dirs-java" << {
       sourceSets*.java.srcDirs*.each { it.mkdirs() }
       sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
    task "create-dirs-groovy" << {
       sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
    }
    dependencies {
        compile  fileTree(dir: '../libs', include: '*.jar')
        compile 'org.apache.commons:commons-lang3:3.1'
        compile 'org.codehaus.groovy:groovy-all:2.1.7:indy'
        compile 'org.slf4j:slf4j-api:1.7.5'
        compile 'ch.qos.logback:logback-classic:1.0.13'
        compile 'com.hazelcast:hazelcast:3.0.2'
        compile 'com.darylteo:rxjava-promises:1.1.0'
        compile 'joda-time:joda-time:2.3'
        testCompile group: 'junit', name: 'junit', version: '4.+'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

project(':client') {
    apply plugin:'application'
    dependencies {
        compile project(':common')
        compile 'com.hazelcast:hazelcast-client:3.0.2'

    }
    mainClassName = "org.brahms5.calendar.client.ClientMain"
}

project(':server') {
    apply plugin:'application'
    dependencies {
        compile project(':common')
        compile 'org.springframework:spring-jdbc:3.2.4.RELEASE'
        compile 'com.h2database:h2:1.3.173'
        testCompile 'dbunit:dbunit:2.2'
    }
    mainClassName = "org.brahms5.calendar.server.ServerMain"

    test {
        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = false
       // listen to events in the test execution lifecycle
       beforeTest { descriptor ->
          logger.lifecycle("Running test: " + descriptor)
       }
       // listen to standard out and standard error of the test JVM(s)
       onOutput { descriptor, event ->
          logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
       }
    }
}
